import numpy as np
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.utils import to_categorical
import pandas as pd
from sklearn.preprocessing import OneHotEncoder

text1 = '나는 지금 진짜 진짜 매우 매우 맛있는 김밥을 엄청 마구 마구 마구 마구 먹었다.'
text2 = '태운이는 선생을 괴롭힌다. 준영이는 못생겼다. 사영이는 마구 마구 더 못생겼다.'

# 맹그러봐.!!
# 텍스트가 두개지만 하나로 만들어야 한다



token = Tokenizer()
token.fit_on_texts([text1, text2])

print(token.word_index)
# {'마구': 1, '진짜': 2, '매우': 3, '못생겼다': 4, '나는': 5, '지금': 6, '맛있는': 7, '김밥을': 8, '엄청': 9, '먹었다': 10, '태운이는': 11, '선생을': 12, '괴롭힌다': 13, '준영이는': 14, '사영이는': 15, '더': 16}

print(token.word_counts)
# OrderedDict([('나는', 1), ('지금', 1), ('진짜', 2), ('매우', 2), ('맛있는', 1), 
# ('김밥을', 1), ('엄청', 1), ('마구', 6), ('먹었다', 1), ('태운이는', 1), 
# ('선생을', 1), ('괴롭힌다', 1), ('준영이는', 1), ('못생겼다', 2), ('사영이는', 1), ('더', 1)])

x = token.texts_to_sequences([text1, text2])
# print(x)   # [[5, 6, 2, 2, 3, 3, 7, 8, 9, 1, 1, 1, 1, 10], [11, 12, 13, 14, 4, 15, 1, 1, 16, 4]]

# x = x[0] + x[1]
x = np.concatenate(x)   # 리스트 합체. 둘 중 하나 선택.
print(x)
# x = x[0] + x[1]   # , 있음
# [5, 6, 2, 2, 3, 3, 7, 8, 9, 1, 1, 1, 1, 10, 11, 12, 13, 14, 4, 15, 1, 1, 16, 4]
# x = np.concatenate(x)   # , 없음
# [ 5  6  2  2  3  3  7  8  9  1  1  1  1 10 11 12 13 14  4 15  1  1 16  4]

x = to_categorical(x)
x = x[:, 1:]   # 첫번째 열 삭제
print(x)
print(x.shape)
# [[0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]
#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]
#  [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]
#  [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]
#  [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]
#  [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]
#  [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]
#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
#  [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
#  [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
# (24, 16)


# x = np.array(x).reshape(-1,)
# x = pd.get_dummies(x)
# print(x)
# print(x.shape)
#     1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16
# 0    0   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0
# 1    0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   0
# 2    0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0
# 3    0   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0
# 4    0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0
# 5    0   0   1   0   0   0   0   0   0   0   0   0   0   0   0   0
# 6    0   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0
# 7    0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0
# 8    0   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0
# 9    1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
# 10   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
# 11   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
# 12   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
# 13   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0   0
# 14   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0   0
# 15   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0   0
# 16   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0   0
# 17   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0   0
# 18   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0
# 19   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   0
# 20   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
# 21   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
# 22   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1
# 23   0   0   0   1   0   0   0   0   0   0   0   0   0   0   0   0
# (24, 16)


# x = np.array(x).reshape(-1, 1)
# ohe = OneHotEncoder()
# x = ohe.fit_transform(x)
# print(x)
# print(x.shape)
#   (0, 4)        1.0
#   (1, 5)        1.0
#   (2, 1)        1.0
#   (3, 1)        1.0
#   (4, 2)        1.0
#   (5, 2)        1.0
#   (6, 6)        1.0
#   (7, 7)        1.0
#   (8, 8)        1.0
#   (9, 0)        1.0
#   (10, 0)       1.0
#   (11, 0)       1.0
#   (12, 0)       1.0
#   (13, 9)       1.0
#   (14, 10)      1.0
#   (15, 11)      1.0
#   (16, 12)      1.0
#   (17, 13)      1.0
#   (18, 3)       1.0
#   (19, 14)      1.0
#   (20, 0)       1.0
#   (21, 0)       1.0
#   (22, 15)      1.0
#   (23, 3)       1.0
# (24, 16)













